package com.cinema.equipment.db;

import com.cinema.equipment.Equipment;
import com.cinema.equipment.SampleData;
import com.cinema.equipment.exceptions.ApplicationError;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javafx.beans.value.ChangeListener;

/**
 * @author slyns
 * @version 3/6/17.
 */
public class DatabaseService {
  private Connection connection;

  public DatabaseService(Connection connection) throws SQLException {
    this.connection = connection;
    Statement statement = connection.createStatement();
    statement.execute("create table if not exists EQUIPMENT (" +
                          "ID integer primary key generated by default as identity (start with 1), " +
                          "MODIFIED_DATE datetime, " +
                          "TYPE varchar(30), " +
                          "DESCRIPTION varchar(255));");

    statement.close();
    if (getAll().isEmpty()) {
      for (Equipment e : SampleData.getAll()) {
        add(e);
      }
    }

  }

  public List<Equipment> getAll() {
    List<Equipment> results = new ArrayList<>();
    try (PreparedStatement selectAll = connection.prepareStatement("select * from EQUIPMENT;")) {
      ResultSet resultSet = selectAll.executeQuery();
      while (resultSet.next()) {
        results.add(from(resultSet));
      }
    } catch (SQLException e) {
      throw new ApplicationError(e);
    }
    return results;
  }

  public Equipment add(Equipment item) {
    try (PreparedStatement insert = connection.prepareStatement("insert into EQUIPMENT values (default, now(), ?, ?)", Statement.RETURN_GENERATED_KEYS)) {
      PreparedStatement insertStatement = item.fillInsertStatement(insert);
      insertStatement.execute();
      ResultSet generatedKey = insertStatement.getGeneratedKeys();
      generatedKey.next();

      return getById(generatedKey.getInt("ID"));
    } catch (SQLException e) {
      throw new ApplicationError(e);
    }
  }

  public Equipment getById(int id) {
    try (PreparedStatement selectOne = connection.prepareStatement("select * from EQUIPMENT where id = ?")) {
      selectOne.setInt(1, id);
      ResultSet resultSet = selectOne.executeQuery();
      resultSet.next();

      Equipment result = from(resultSet);
      result.setId(resultSet.getInt("ID"));
      return result;
    } catch (SQLException e) {
      throw new ApplicationError(e);
    }
  }

  public Equipment update(Equipment equipment) {
    try (PreparedStatement updateOne = connection.prepareStatement("update EQUIPMENT set MODIFIED_DATE = now(), TYPE = ?, DESCRIPTION = ? where id = ?")) {
      updateOne.setString(1, equipment.getType());
      updateOne.setString(2, equipment.getDescription());
      updateOne.setInt(3, equipment.getId());
      updateOne.execute();
      return getById(equipment.getId());
    } catch (SQLException e) {
      throw new ApplicationError(e);
    }
  }

  private Equipment from(ResultSet resultSet) throws SQLException {
    Equipment item = new Equipment(resultSet.getInt("ID"), resultSet.getString("TYPE"), resultSet.getString("DESCRIPTION"));
    ChangeListener<String> listener = new EquipmentChangeListener(item, this);
    item.typeProperty().addListener(listener);
    item.descriptionProperty().addListener(listener);

    return item;
  }
}
